<?xml version="1.0" encoding="UTF-8"?>
<project name="example" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="src.dir" location="src/main" />
    <property name="unit.test.dir" location="src/unit-tests" />
    <property name="system.test.dir" location="src/system-tests" />
    <property name="integration.test.dir" location="src/integration-tests" />

    <property name="build.dir" location="build" />
    <property name="dist.dir" location="${build.dir}/dist" />
    <property name="report.dir" location="${build.dir}/report" />
    <property name="compile.dir" location="${build.dir}/compile" />

    <property name="cobertura.dir" location="${build.dir}/cobertura" />
    <property name="cobertura.report.dir" location="${cobertura.dir}/report" />
    <property name="cobertura.classes.dir" location="${cobertura.dir}/classes" />
    <property name="cobertura.datafile" location="${cobertura.dir}/cobertura.ser" />

    <!--<property name="ivy.checksums" value="" />-->
    <property name="ivy.default.ivy.user.dir" value="${user.home}/.ivy2" />
    <property name="ivy.jar.file" value="${ivy.default.ivy.user.dir}/ivy-2.2.0.jar" />
    <property name="ivy.jar.source" value="http://repo1.maven.org/maven2/org/apache/ivy/ivy/2.2.0/ivy-2.2.0.jar" />

    <macrodef name="make-jar">
        <attribute name="srcdir" />
        <attribute name="jarfile" />
        <attribute name="classpath" />
        <sequential>
            <mkdir dir="${compile.dir}/classes" />
            <javac srcdir="@{srcdir}" destdir="${compile.dir}/classes" classpathref="@{classpath}"
                   source="1.6" target="1.6" includeantruntime="no" debug="yes" />
            <copy todir="${compile.dir}/classes" includeemptydirs="no">
                <fileset dir="@{srcdir}" excludes="**/*.java" />
            </copy>
            <jar jarfile="${compile.dir}/@{jarfile}" basedir="${compile.dir}/classes" />
            <delete dir="${compile.dir}/classes" />
        </sequential>
    </macrodef>

    <macrodef name="unit-test">
        <attribute name="testdir" />
        <sequential>
            <mkdir dir="${report.dir}" />
            <junit fork="yes" forkmode="once" printsummary="yes" haltonfailure="no" failureproperty="unit.tests.failed">
                <classpath refid="test.classpath" />
                <formatter type="xml" />
                <batchtest if="testcase" todir="${report.dir}">
                    <fileset dir="@{testdir}">
                        <include name="**/${testcase}.java" />
                    </fileset>
                </batchtest>
                <batchtest unless="testcase" todir="${report.dir}">
                    <fileset dir="@{testdir}">
                        <include name="**/*Tests.java" />
                    </fileset>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <target name="build" depends="clean,run-tests,make-war" description="Main target to create WAR file." />

    <target name="clean">
        <delete dir="${build.dir}" />
    </target>

    <target name="fetch-libs" depends="fetch-ivy" description="Fetch third-party libraries.">
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
            <classpath location="${ivy.jar.file}" />
        </taskdef>
        <ivy:configure file="ivysettings.xml" />
        <ivy:resolve file="ivy.xml" transitive="false" />
        <ivy:retrieve pattern="lib/[conf]/[type]/[artifact]-[revision].[ext]" sync="true" />
        <path id="compile.classpath">
            <fileset dir="lib/provided/jar" includes="*.jar" />
            <fileset dir="lib/compile/jar" includes="*.jar" />
        </path>
        <path id="test.classpath">
            <fileset dir="${compile.dir}" />
            <fileset dir="lib/test/jar" includes="*.jar" />
            <path refid="compile.classpath" />
        </path>
        <path id="cobertura.classpath">
            <fileset dir="lib/cobertura/jar" includes="*.jar" />
        </path>
    </target>

    <available file="${ivy.jar.file}" property="ivy.exists" />

    <target name="fetch-ivy" unless="ivy.exists">
        <mkdir dir="${ivy.default.ivy.user.dir}" />
        <get src="${ivy.jar.source}" dest="${ivy.jar.file}" />
    </target>

    <target name="make-jars" depends="fetch-libs">
        <make-jar srcdir="${src.dir}" jarfile="${ant.project.name}.jar" classpath="compile.classpath" />
        <make-jar srcdir="${unit.test.dir}" jarfile="${ant.project.name}-unit-tests.jar" classpath="test.classpath" />
        <make-jar srcdir="${integration.test.dir}" jarfile="${ant.project.name}-integration-tests.jar" classpath="test.classpath" />
        <make-jar srcdir="${system.test.dir}" jarfile="${ant.project.name}-system-tests.jar" classpath="test.classpath" />
    </target>

    <target name="unit-tests" depends="make-jars">
        <unit-test testdir="${unit.test.dir}" />
        <unit-test testdir="${integration.test.dir}" />
        <unit-test testdir="${system.test.dir}" />
    </target>

    <target name="run-tests" depends="unit-tests" if="unit.tests.failed"
            description="Run all tests. Use -Dtestcase=SomeTestClassName to specify a single test.">
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml" />
            <report todir="${report.dir}/html" />
        </junitreport>
        <fail message="One or more tests failed. Please check the logs for more info." />
    </target>

    <target name="make-war" depends="make-jars">
        <mkdir dir="${dist.dir}" />
        <war warfile="${dist.dir}/${ant.project.name}.war" webxml="src/webapp/WEB-INF/web.xml">
            <fileset dir="src/webapp" excludes="**/web.xml" />
            <classes dir="${src.dir}" includes="*.properties" />
            <lib dir="${compile.dir}" excludes="*-tests.jar" />
            <lib dir="lib/compile/jar" />
        </war>
    </target>

    <target name="run-jetty" depends="clean,make-jars" description="Run application in Jetty.">
        <java classname="example.jetty.WebServer" classpathref="test.classpath" fork="true" failonerror="true" />
    </target>

    <target name="package-src" depends="clean" description="Create zip of the source code for distribution.">
        <mkdir dir="${build.dir}" />
        <zip basedir="${basedir}" destfile="${build.dir}/${ant.project.name}.zip">
            <exclude name="**/.DS_Store" />
            <exclude name="build/" />
            <exclude name="*.iws" />
            <exclude name=".git/" />
            <exclude name="lib/" />
            <exclude name="out/" />
        </zip>
    </target>

    <target name="ivy-report" depends="fetch-libs" description="Create ivy dependency report.">
        <mkdir dir="${build.dir}/ivy" />
        <ivy:report conf="compile,test,provided" todir="${build.dir}/ivy" outputpattern="[conf].[ext]"
                    xsl="true" xml="false" graph="false" dot="false" />
    </target>

    <target name="coverage-report" depends="make-jars" description="Create cobertura code coverage report.">
        <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

        <mkdir dir="${cobertura.classes.dir}" />
        <cobertura-instrument todir="${cobertura.classes.dir}" datafile="${cobertura.datafile}">
            <fileset dir="${compile.dir}" excludes="*-tests.jar" />
        </cobertura-instrument>

        <junit fork="yes" forkmode="perBatch" printsummary="yes" haltonfailure="no">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />
            <classpath>
                <fileset dir="${cobertura.classes.dir}" />
                <fileset dir="${compile.dir}" includes="*.jar" />
                <path refid="test.classpath" />
                <path refid="cobertura.classpath" />
            </classpath>
            <batchtest>
                <fileset dir="${unit.test.dir}">
                    <include name="**/*Tests.java" />
                </fileset>
            </batchtest>
            <batchtest>
                <fileset dir="${integration.test.dir}">
                    <include name="**/*Tests.java" />
                </fileset>
            </batchtest>
            <batchtest>
                <fileset dir="${system.test.dir}">
                    <include name="**/*Tests.java" />
                </fileset>
            </batchtest>
        </junit>

        <mkdir dir="${cobertura.report.dir}" />
        <cobertura-report format="html" datafile="${cobertura.datafile}"
                          destdir="${cobertura.report.dir}" srcdir="${src.dir}" />
    </target>

</project>
